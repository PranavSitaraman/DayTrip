@page "/Login"
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavigationManager;
@using Blazored.FluentValidation
@using System.Net
@using DayTrip.Shared.UserManagement
@using Microsoft.Extensions.Primitives

<body style="background-color:#71dce1;width:100%;height:100%;font-family:'Courier New';font-weight:bold;">
<div class="center-align-background" style="width:50%; margin-left:auto; margin-right:auto;">
    <div class="form-outer" style="min-width: 250px; max-width: 500px; margin-left:auto; margin-right:auto">
        <EditForm Model="@Model" OnValidSubmit="@Submit">
            <DataAnnotationsValidator/>
            <img src="/assets/icons/DayTrip.png" style="padding-top:5%; border-radius:10px;display: block;margin-left: auto; margin-right: auto;" width = "50%" height = "auto"/>
            <div class="form-input">
                <label>Email</label>
                <div>
                    <br />
                    <InputText style="width: 100%; box-sizing: border-box; font-family:'Courier New';font-weight:bold" id="email" placeholder="alice-smith@example.com" @bind-Value="Model.Email"/>
                </div>
            </div>
            <br/>
            <div class="form-input">
                <label>Password</label>
                <div>
                    <br />
                    <InputText style="width: 100%; box-sizing: border-box; font-family:'Courier New';font-weight:bold" id="password" placeholder="password" @bind-Value="Model.Password"/>
                </div>
            </div>

            <div class="form-error">
                <ValidationSummary/>
                @if (!String.IsNullOrEmpty(_resultMessage))
                {
                    <div class="form-error-message"><br>@_resultMessage</div>
                }
            </div>
            <br/>
            <div class="centered-button-group" style="float:left">
                <button type="submit" style="font-family:'Courier New';font-weight:bold">Sign In</button>
            </div>

        </EditForm>
        <EditForm Model="@Model" OnValidSubmit="@Registration">
                <div class="centered-button-group" style="float:right">
                    <button OnClick=Registration style="font-family:'Courier New';font-weight:bold">Register</button>
                </div>
            </EditForm>
        

    </div>

</div>
</body>

@code {

    private LoginModel Model = new();

    private string _resultMessage;
    private string _redirectUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirect", out var redirect))
        {
            _redirectUrl = redirect.ToString();
        }


    }

    private async void Submit()
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("Account/Login", Model);

        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                Console.WriteLine("success");
                _resultMessage = "Login successful";
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/", forceLoad: true);
                break;
            case HttpStatusCode.NoContent:
                Console.WriteLine("failure");
                _resultMessage = "Account with specified email does not exist";
                break;

            case HttpStatusCode.BadRequest:
                Console.WriteLine("incorrect");
                _resultMessage = "Incorrect email or password";
                break;
            case HttpStatusCode.InternalServerError:
                _resultMessage = "An unexpected server error has occured";
                break;
        }
        StateHasChanged();
    }
    private void Registration()
    {
        NavigationManager.NavigateTo("/Register", forceLoad:true);
    }
}